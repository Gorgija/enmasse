import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

allprojects  {
    group = 'io.enmasse'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}


ext {
    dockerOrg           = System.getenv("DOCKER_ORG") ?: "enmasseproject"
    dockerUser          = System.getenv("DOCKER_USER") ?: null
    dockerPasswd        = System.getenv("DOCKER_PASS") ?: null
    commit              = System.getenv("COMMIT") ?: "latest"
    dockerImageVersion  = System.getenv("VERSION") ?: "latest"
    dockerRegistry      = System.getenv("DOCKER_REGISTRY") ?: "docker.io"
    openShiftProject    = System.getenv("OPENSHIFT_PROJECT") ?: "myproject"
    openShiftUser       = System.getenv("OPENSHIFT_USER") ?: "developer"
    openShiftPasswd     = System.getenv("OPENSHIFT_PASSWD") ?: "developer"
    openShiftMaster     = System.getenv("OPENSHIFT_MASTER") ?: "https://localhost:8443"
    openShiftToken      = System.getenv("OPENSHIFT_TOKEN") ?: "unknown"
    mochaArgs           = System.getenv("MOCHA_ARGS") ?: null

    slf4jVersion = '1.7.21'
    jacksonVersion = '2.7.4'
    hamcrestVersion = '1.3'
    junitVersion = '4.12'
    mockitoVersion = '2.0.52-beta'
    vertxVersion = '3.4.1'
    openshiftClientVersion = '2.5.7'
    resteasyVersion = '3.1.0.Final'
    artemisVersion = '2.2.0'
    jbossLoggingVersion = '3.3.0.Final'
    jbossLoggingProcessorVersion = '2.0.0.Alpha2'
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(Tar){
        compression = Compression.GZIP
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/snapshots/" }
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    docker {
        registryCredentials {
            username = dockerUser
            password = dockerPasswd
        }
    }

    if (new File(projectDir, "Dockerfile").exists()) {
        task buildImage(type: DockerBuildImage) {
            inputDir = projectDir
            tag = "${dockerOrg}/${project.name}:${commit}"
            doLast {
                println "Executing buildimage for $projectDir commit ${commit}"
            }
        }
        buildImage.dependsOn {
            tasks.findAll { task -> task.name.startsWith('pack') }
        }


        task tagImage(type: DockerTagImage) {
            dependsOn buildImage
            force = true
            imageId = buildImage.getTag()
            repository = "${dockerRegistry}/${dockerOrg}/${project.name}"
            tag = commit
            doLast {
                println "Executing tagImage for $projectDir commit ${commit}"
            }
        }

        task pushImage(type: DockerPushImage) {
            dependsOn tagImage
            tag = commit
            imageName = "${dockerRegistry}/${dockerOrg}/${project.name}"
            doLast {
                println "Executing pushImage for $projectDir commit ${commit}"
            }
        }

        task tagVersion(type: DockerTagImage) {
            force = true
            imageId = buildImage.getTag()
            repository = "${dockerRegistry}/${dockerOrg}/${project.name}"
            tag = dockerImageVersion
        }

        task pushVersion(type: DockerPushImage) {
            dependsOn tagVersion
            tag = dockerImageVersion
            imageName = "${dockerRegistry}/${dockerOrg}/${project.name}"
        }
    }

    task runMocha(type: Exec) {
        onlyIf {
            def result = exec {
                executable = "which"
                args "mocha"
                ignoreExitValue = true
            }
            result.exitValue == 0
        }
        executable = "mocha"
        environment("MOCHA_FILE", "build/test-results/test/TEST-${project.name}.xml")
        if (mochaArgs != null) {
            args mochaArgs
        }
    }
}

project('systemtests') {
    test {
        onlyIf {
            project.hasProperty("systemtests")
        }
    }
}

task deploy(type: Exec) {
    commandLine "./templates/install/deploy-openshift.sh", "-n", openShiftProject, "-u", openShiftUser, "-m", openShiftMaster
}
